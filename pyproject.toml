[project]
name = "etl-test"
version = "0.1.0"
description = "An etl test for Delfos."
authors = [
    { name = "Ribamar Neto", email = "ribaferreiraneto@gmail.com" }
]
dependencies = [
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "httpx>=0.28.1",
    "pandas>=2.2.3",
    "pydantic>=2.10.4",
]
requires-python = ">= 3.12"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "mypy>=1.12.0",
    "pip-audit>=2.7.3",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.6.9",
]

[tool.hatch.metadata]
allow-direct-references = true
readme = "README.md"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]
exclude = [
    "tests",
    "^src/db_config/fonte/database.py$",
    "^src/db_config/fonte/models.py$",
    "^src/db_config/alvo/database.py$",
    "^src/db_config/alvo/models.py$",
    "^src/db_config/alvo/__init__.py$",
    "^src/db_config/fonte/__init__.py$",
]


[tool.ruff]
line-length = 79 # Mude para mais se precisar de mais caracteres.
indent-width = 4
target-version = "py312"


[tool.ruff.lint]
select = ["ALL"]
preview = true
ignore = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `*args`
    "B008", # Do not perform calls in argument defaults
    "COM812", # Missing trailing comma
    "CPY001", # Missing copyright notice at top of file
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D107", # Missing docstring in `__init__`
    "DOC201", # Missing docstrings returns
    "DOC501", # Missing docstrings exception
    "DOC402", # Missing docstrings yield
    "ISC001", # Single line implicit string concatenation
    "SLF001", # Private member accessed
    "FAST002",# FastAPI dependency without `Annotated`
    "T201",   # `print` found
    "DTZ007", # Naive datetime constructed using `datetime.datetime.strptime()` without %z
    "PD901",  # Avoid using the generic variable name `df` for DataFrames
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY002", # Create your own exception
    "PLR2004",# Magic value used in comparison, consider replacing `201` with a constant variable
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PD002",  # `inplace=True` should be avoided; it has inconsistent behavior
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.pylint]
max-args = 15
max-locals = 20


[tool.ruff.format]
quote-style = "double" # Use double quotes for strings.
indent-style = "space" # Indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Respect magic trailing commas.
line-ending = "auto" # Automatically detect the appropriate line ending.
docstring-code-format = true # Enable auto-formatting of code examples in docstrings.
docstring-code-line-length = "dynamic" # Set the line length limit used when formatting code snippets in docstrings.


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "D104", # Missing docstring in public package
    "E402", # Module level import not at top of file
    "F401", # Module imported but unused
]
"tests/**" = [
    "ANN001",  # Missing type annotation for function
    "ANN201",  # Missing return type annotation
    "ARG001", # Unused function argument
    "E501", # Line too long
    "S101", # Use of `assert detected
    "PLR2004", # Magic value used in comparison
    "SLF001", # Private member accessed
    "S106", # Possible hardcoded password assigned to argument
]
"enum.py" = [
    "A005", # Module is shadowing a Python builtin module
]
"key_builder.py" = [
    "ARG003", # Unused class method argument: `kwargs`
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
]
